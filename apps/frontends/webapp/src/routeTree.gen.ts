/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ShareRouteImport } from './routes/share'
import { Route as ScanRouteImport } from './routes/scan'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as MapRouteImport } from './routes/map'
import { Route as GamesRouteImport } from './routes/games'
import { Route as ChallengesRouteImport } from './routes/challenges'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VenueIdRouteImport } from './routes/venue.$id'
import { Route as ClaimIdRouteImport } from './routes/claim.$id'

const ShareRoute = ShareRouteImport.update({
  id: '/share',
  path: '/share',
  getParentRoute: () => rootRouteImport,
} as any)
const ScanRoute = ScanRouteImport.update({
  id: '/scan',
  path: '/scan',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const MapRoute = MapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRouteImport,
} as any)
const GamesRoute = GamesRouteImport.update({
  id: '/games',
  path: '/games',
  getParentRoute: () => rootRouteImport,
} as any)
const ChallengesRoute = ChallengesRouteImport.update({
  id: '/challenges',
  path: '/challenges',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VenueIdRoute = VenueIdRouteImport.update({
  id: '/venue/$id',
  path: '/venue/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ClaimIdRoute = ClaimIdRouteImport.update({
  id: '/claim/$id',
  path: '/claim/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/challenges': typeof ChallengesRoute
  '/games': typeof GamesRoute
  '/map': typeof MapRoute
  '/profile': typeof ProfileRoute
  '/scan': typeof ScanRoute
  '/share': typeof ShareRoute
  '/claim/$id': typeof ClaimIdRoute
  '/venue/$id': typeof VenueIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/challenges': typeof ChallengesRoute
  '/games': typeof GamesRoute
  '/map': typeof MapRoute
  '/profile': typeof ProfileRoute
  '/scan': typeof ScanRoute
  '/share': typeof ShareRoute
  '/claim/$id': typeof ClaimIdRoute
  '/venue/$id': typeof VenueIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/challenges': typeof ChallengesRoute
  '/games': typeof GamesRoute
  '/map': typeof MapRoute
  '/profile': typeof ProfileRoute
  '/scan': typeof ScanRoute
  '/share': typeof ShareRoute
  '/claim/$id': typeof ClaimIdRoute
  '/venue/$id': typeof VenueIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/challenges'
    | '/games'
    | '/map'
    | '/profile'
    | '/scan'
    | '/share'
    | '/claim/$id'
    | '/venue/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/challenges'
    | '/games'
    | '/map'
    | '/profile'
    | '/scan'
    | '/share'
    | '/claim/$id'
    | '/venue/$id'
  id:
    | '__root__'
    | '/'
    | '/challenges'
    | '/games'
    | '/map'
    | '/profile'
    | '/scan'
    | '/share'
    | '/claim/$id'
    | '/venue/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChallengesRoute: typeof ChallengesRoute
  GamesRoute: typeof GamesRoute
  MapRoute: typeof MapRoute
  ProfileRoute: typeof ProfileRoute
  ScanRoute: typeof ScanRoute
  ShareRoute: typeof ShareRoute
  ClaimIdRoute: typeof ClaimIdRoute
  VenueIdRoute: typeof VenueIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/share': {
      id: '/share'
      path: '/share'
      fullPath: '/share'
      preLoaderRoute: typeof ShareRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/scan': {
      id: '/scan'
      path: '/scan'
      fullPath: '/scan'
      preLoaderRoute: typeof ScanRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/games': {
      id: '/games'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof GamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/challenges': {
      id: '/challenges'
      path: '/challenges'
      fullPath: '/challenges'
      preLoaderRoute: typeof ChallengesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/venue/$id': {
      id: '/venue/$id'
      path: '/venue/$id'
      fullPath: '/venue/$id'
      preLoaderRoute: typeof VenueIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/claim/$id': {
      id: '/claim/$id'
      path: '/claim/$id'
      fullPath: '/claim/$id'
      preLoaderRoute: typeof ClaimIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChallengesRoute: ChallengesRoute,
  GamesRoute: GamesRoute,
  MapRoute: MapRoute,
  ProfileRoute: ProfileRoute,
  ScanRoute: ScanRoute,
  ShareRoute: ShareRoute,
  ClaimIdRoute: ClaimIdRoute,
  VenueIdRoute: VenueIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

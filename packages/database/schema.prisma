// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum CoinType {
  SCAN
  SHARE
  GAME
  REFERRAL
}

enum TagStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum ShareType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  WHATSAPP
}

enum GameType {
  QUIZ
  PUZZLE
  REACTION
  MUSIC
}

enum GameStatus {
  ACTIVE
  COMPLETED
  EXPIRED
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CLAIMED
}

enum GiftType {
  COFFEE
  DRINK
  DISH
  PIZZA
  BOTTLE
  DISCOUNT
}

enum GiftStatus {
  AVAILABLE
  CLAIMED
  EXPIRED
}

enum VenueType {
  RESTAURANT
  CAFE
  BAR
  CLUB
  STORE
  ORGANIZATION
}

// Core entities
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  firstName   String?
  lastName    String?
  avatar      String?
  phoneNumber String?
  dateOfBirth DateTime?
  totalCoins  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  scans         Scan[]
  shares        Share[]
  games         Game[]
  coins         Coin[]
  gifts         Gift[]  // New relationship to gifts
  referralsSent Referral[] @relation("ReferrerUser")
  referralsReceived Referral[] @relation("ReferredUser")
  challengeParticipants ChallengeParticipant[] @relation("ChallengeParticipant")

  @@map("users")
}

model Tenant {
  id          String  @id @default(cuid())
  name        String
  description String?
  email       String  @unique
  phoneNumber String?
  address     String?
  city        String?
  country     String?
  vatNumber   String?
  legalName   String?
  googleMap   String?
  facebook    String?
  instagram   String?
  tiktok      String?
  website     String?
  logo        String?
  venueType   VenueType
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  tags       Tag[]
  shares     Share[]
  gifts      Gift[]
  challenges Challenge[]

  @@map("tenants")
}

model Tag {
  id          String    @id @default(cuid())
  tenantId    String
  name        String
  description String?
  nfcId       String?   @unique
  qrCode      String?   @unique
  location    String?
  status      TagStatus @default(ACTIVE)
  scanCount   Int       @default(0)
  maxScansPerUser Int   @default(10) // Daily limit per user
  coinsPerScan Int      @default(10)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  scans  Scan[]

  @@map("tags")
  @@index([tenantId])
  @@index([nfcId])
  @@index([qrCode])
}

model Scan {
  id        String   @id @default(cuid())
  userId    String
  tagId     String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  expiredAt DateTime // Default 12-hour expiration

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  coin Coin?

  @@map("scans")
  @@index([userId])
  @@index([tagId])
  @@index([createdAt])
  @@unique([userId, tagId, createdAt]) // Prevent duplicate scans within same timestamp
}

model Share {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String
  socialType  ShareType
  shareUrl    String?
  createdAt   DateTime @default(now())

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  coin   Coin?

  @@map("shares")
  @@index([userId])
  @@index([tenantId])
  @@index([createdAt])
}

model Game {
  id          String     @id @default(cuid())
  userId      String
  earnCoin    Boolean    @default(true) // Whether the game is eligible for coin rewards
  gameChallenge Boolean  @default(false) // Whether the game is part of a challenge
  gameType    GameType
  status      GameStatus @default(ACTIVE)
  isWinner    Boolean    @default(false)
  coinsEarned Int        @default(0)
  coinsSpent  Int        @default(0)
  gameData    Json?      // Store game-specific data for Quiz game
  gameUrl     String?    // URL to the GDevelop game if hosted externally
  gameImage   String?
  gameTitle   String?
  gameDescription String?
  startedAt   DateTime   @default(now())
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relationships
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  coin Coin?

  @@map("games")
  @@index([userId])
  @@index([gameChallenge])
  @@index([status])
  @@index([createdAt])
}

model Coin {
  id          String   @id @default(cuid())
  userId      String
  coinType    CoinType
  amount      Int
  description String?
  
  // Reference to the source event (nullable - only one will be set)
  scanId      String?  @unique
  shareId     String?  @unique
  gameId      String?  @unique
  referralId  String?  @unique
  
  createdAt   DateTime @default(now())

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  scan     Scan?     @relation(fields: [scanId], references: [id])
  share    Share?    @relation(fields: [shareId], references: [id])
  game     Game?     @relation(fields: [gameId], references: [id])
  referral Referral? @relation(fields: [referralId], references: [id])

  @@map("coins")
  @@index([userId])
  @@index([coinType])
  @@index([createdAt])
}

model Challenge {
  id              String          @id @default(cuid())
  tenantId        String
  title           String
  description     String
  coinScanCost    Int?
  coinShareCost   Int?
  coinGameCost    Int?
  maxParticipants Int?
  currentParticipants Int @default(0)
  startDate       DateTime
  endDate         DateTime
  status          ChallengeStatus @default(ACTIVE)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  gifts  Gift[]
  challengeParticipants ChallengeParticipant[] @relation("ChallengeParticipant")

  @@map("challenges")
  @@index([tenantId])
  @@index([status])
  @@index([startDate, endDate])
}

model ChallengeParticipant {
  id          String   @id @default(cuid())
  challengeId String
  userId      String
  joinedAt    DateTime @default(now())

  // Relationships
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade, name: "ChallengeParticipant")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "ChallengeParticipant")

  @@map("challenge_participants")
  @@unique([challengeId, userId]) // Prevent duplicate participation
  @@index([challengeId])
  @@index([userId])
}


model Gift {
  id          String     @id @default(cuid())
  tenantId    String
  name        String
  description String
  giftType    GiftType
  imageUrl    String?
  value       Decimal?   @db.Decimal(10, 2)
  quantity    Int        @default(1)
  status      GiftStatus @default(AVAILABLE)
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // New optional relationships
  userId      String?
  challengeId String?

  // Relationships
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id])
  challenge Challenge? @relation(fields: [challengeId], references: [id])

  @@map("gifts")
  @@index([tenantId])
  @@index([status])
  @@index([expiresAt])
  @@index([userId])
  @@index([challengeId])
}


model Referral {
  id          String   @id @default(cuid())
  referrerId  String
  referredId  String
  coinsEarned Int      @default(50) // Coins earned by referrer
  bonusCoins  Int      @default(25) // Bonus coins for referred user
  createdAt   DateTime @default(now())

  // Relationships
  referrer User @relation("ReferrerUser", fields: [referrerId], references: [id], onDelete: Cascade)
  referred User @relation("ReferredUser", fields: [referredId], references: [id], onDelete: Cascade)
  coin     Coin?

  @@map("referrals")
  @@unique([referrerId, referredId]) // Prevent duplicate referrals
  @@index([referrerId])
  @@index([referredId])
}
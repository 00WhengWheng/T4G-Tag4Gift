// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional: for migrations
}

// Enum definitions (now matching PostgreSQL enums)
enum CoinType {
  SCAN
  SHARE
  GAME
  REFERRAL
}

enum TagStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum ShareType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  WHATSAPP
  TIKTOK
}

enum GameType {
  QUIZ
  PUZZLE
  REACTION
  MUSIC
}

enum GameStatus {
  ACTIVE
  COMPLETED
  EXPIRED
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CLAIMED
}

enum GiftType {
  COFFEE
  DRINK
  DISH
  PIZZA
  BOTTLE
  DISCOUNT
}

enum GiftStatus {
  AVAILABLE
  CLAIMED
  EXPIRED
}

enum VenueType {
  RESTAURANT
  CAFE
  BAR
  CLUB
  STORE
  ORGANIZATION
}

// Core entities
model User {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  email       String    @unique
  username    String    @unique
  auth0Id     String?   @unique @map("auth0_id")
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  avatar      String?
  phoneNumber String?   @map("phone_number")
  dateOfBirth DateTime? @map("date_of_birth") @db.Timestamptz
  password    String
  totalCoins  Int       @default(0) @map("total_coins")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  scans                   Scan[]
  shares                  Share[]
  games                   Game[]
  coins                   Coin[]
  gifts                   Gift[]
  referralsSent           Referral[]  @relation("ReferrerUser")
  referralsReceived       Referral[]  @relation("ReferredUser")
  challengeParticipants   ChallengeParticipant[] @relation("ChallengeParticipant")
  standaloneGameSessions  StandaloneGameSession[]

  @@map("users")
}

model GameTemplate {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  name        String
  description String?
  type        GameType
  category    String?
  difficulty  String?
  structure   Json?
  gdevelopProjectUrl String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
  sessions    StandaloneGameSession[]
}

model StandaloneGameSession {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  userId      String   @map("user_id")
  gameId      String   @map("game_id")
  score       Int
  timeSpent   Int?
  completedAt DateTime? @db.Timestamptz
  createdAt   DateTime @default(now()) @db.Timestamptz

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game GameTemplate @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Tenant {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  name        String
  description String?
  email       String     @unique
  phoneNumber String?    @map("phone_number")
  address     String?
  city        String?
  country     String?
  vatNumber   String?    @map("vat_number")
  legalName   String?    @map("legal_name")
  googleMap   String?    @map("google_map")
  facebook    String?
  instagram   String?
  tiktok      String?
  website     String?
  logo        String?
  venueType   VenueType  @map("venue_type")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  tags        Tag[]
  shares      Share[]
  gifts       Gift[]
  challenges  Challenge[]

  @@map("tenants")
}

model Tag {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  tenantId        String    @map("tenant_id")
  name            String
  description     String?
  nfcId           String?   @unique @map("nfc_id")
  qrCode          String?   @unique @map("qr_code")
  location        String?
  status          TagStatus @default(ACTIVE)
  scanCount       Int       @default(0) @map("scan_count")
  maxScansPerUser Int       @default(10) @map("max_scans_per_user")
  coinsPerScan    Int       @default(10) @map("coins_per_scan")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  scans  Scan[]

  @@map("tags")
  @@index([tenantId])
  @@index([nfcId])
  @@index([qrCode])
}

model Scan {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  userId    String   @map("user_id")
  tagId     String   @map("tag_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  expiredAt DateTime @map("expired_at") @db.Timestamptz

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  coin Coin?

  @@map("scans")
  @@index([userId])
  @@index([tagId])
  @@index([createdAt])
  @@unique([userId, tagId, createdAt])
}

model Share {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  userId      String     @map("user_id")
  tenantId    String     @map("tenant_id")
  socialType  ShareType  @map("social_type")
  shareUrl    String?    @map("share_url")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  coin   Coin?

  @@map("shares")
  @@index([userId])
  @@index([tenantId])
  @@index([createdAt])
}

model Game {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  userId          String      @map("user_id")
  earnCoin        Boolean     @default(true) @map("earn_coin")
  gameChallenge   Boolean     @default(false) @map("game_challenge")
  gameType        GameType    @map("game_type")
  status          GameStatus  @default(ACTIVE)
  isWinner        Boolean     @default(false) @map("is_winner")
  coinsEarned     Int         @default(0) @map("coins_earned")
  coinsSpent      Int         @default(0) @map("coins_spent")
  gameData        Json?       @map("game_data")
  gameUrl         String?     @map("game_url")
  gameImage       String?     @map("game_image")
  gameTitle       String?     @map("game_title")
  gameDescription String?     @map("game_description")
  startedAt       DateTime    @default(now()) @map("started_at") @db.Timestamptz
  completedAt     DateTime?   @map("completed_at") @db.Timestamptz
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  coin Coin?
  quizQuestions QuizQuestion[]

  @@map("games")
  @@index([userId])
  @@index([gameChallenge])
  @@index([status])
  @@index([createdAt])
}

model Coin {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  userId      String    @map("user_id")
  coinType    CoinType  @map("coin_type")
  amount      Int
  description String?
  
  // Reference to the source event (nullable - only one will be set)
  scanId      String?   @unique @map("scan_id")
  shareId     String?   @unique @map("share_id")
  gameId      String?   @unique @map("game_id")
  referralId  String?   @unique @map("referral_id")
  
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  scan     Scan?     @relation(fields: [scanId], references: [id])
  share    Share?    @relation(fields: [shareId], references: [id])
  game     Game?     @relation(fields: [gameId], references: [id])
  referral Referral? @relation(fields: [referralId], references: [id])

  @@map("coins")
  @@index([userId])
  @@index([coinType])
  @@index([createdAt])
}

model Challenge {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  tenantId            String            @map("tenant_id")
  title               String
  description         String
  coinScanCost        Int?              @map("coin_scan_cost")
  coinShareCost       Int?              @map("coin_share_cost")
  coinGameCost        Int?              @map("coin_game_cost")
  maxParticipants     Int?              @map("max_participants")
  currentParticipants Int               @default(0) @map("current_participants")
  startDate           DateTime          @map("start_date") @db.Timestamptz
  endDate             DateTime          @map("end_date") @db.Timestamptz
  status              ChallengeStatus   @default(ACTIVE)
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime          @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  gifts  Gift[]
  challengeParticipants ChallengeParticipant[] @relation("ChallengeParticipant")

  @@map("challenges")
  @@index([tenantId])
  @@index([status])
  @@index([startDate, endDate])
}

model ChallengeParticipant {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  challengeId String    @map("challenge_id")
  userId      String    @map("user_id")
  joinedAt    DateTime  @default(now()) @map("joined_at") @db.Timestamptz

  // Relationships
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade, name: "ChallengeParticipant")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "ChallengeParticipant")

  @@map("challenge_participants")
  @@unique([challengeId, userId])
  @@index([challengeId])
  @@index([userId])
}

model Gift {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  tenantId    String      @map("tenant_id")
  name        String
  description String
  giftType    GiftType    @map("gift_type")
  imageUrl    String?     @map("image_url")
  value       Decimal?    @db.Decimal(10, 2)
  quantity    Int         @default(1)
  status      GiftStatus  @default(AVAILABLE)
  expiresAt   DateTime?   @map("expires_at") @db.Timestamptz
  coinScanRequirement   Int?   @map("coin_scan_requirement")
  coinShareRequirement  Int?   @map("coin_share_requirement")
  coinGameRequirement   Int?   @map("coin_game_requirement")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // New optional relationships
  userId      String?     @map("user_id")
  challengeId String?     @map("challenge_id")

  // Relationships
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id])
  challenge Challenge? @relation(fields: [challengeId], references: [id])

  @@map("gifts")
  @@index([tenantId])
  @@index([status])
  @@index([expiresAt])
  @@index([userId])
  @@index([challengeId])
}

model Referral {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  referrerId  String    @map("referrer_id")
  referredId  String    @map("referred_id")
  coinsEarned Int       @default(50) @map("coins_earned")
  bonusCoins  Int       @default(25) @map("bonus_coins")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relationships
  referrer User @relation("ReferrerUser", fields: [referrerId], references: [id], onDelete: Cascade)
  referred User @relation("ReferredUser", fields: [referredId], references: [id], onDelete: Cascade)
  coin     Coin?

  @@map("referrals")
  @@unique([referrerId, referredId])
  @@index([referrerId])
  @@index([referredId])
}

model QuizQuestion {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  gameId      String    @map("game_id")
  question    String
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relationships
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  answers     QuizAnswer[]

  @@map("quiz_questions")
  @@index([gameId])
}

model QuizAnswer {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Text
  quizQuestionId String   @map("quiz_question_id")
  answer        String
  isCorrect     Boolean   @default(false) @map("is_correct")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relationships
  question      QuizQuestion @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
  @@index([quizQuestionId])
}